---
- name: Provision ASA Firewalls
  connection: local
  hosts: localhost
  gather_facts: false
  # The paramater region will be set for all ec2 modules by specifying it here under module_defaults
  module_defaults:
    group/aws:
      region: ca-central-1
  vars:
    instance_name: "TEST_INSTANCE"

  tasks:
    - name: Include vars of resources.yml which contains the vpc-subnet-id that we need
      include_vars:
        file: "{{playbook_dir}}/resources.yml"

    # Using ec2_ami_facts allows us to find a particular ami instance id regardless of region
    # Look for owner 309956199498 to find official Red Hat AMIs
    - name: find ami instance-id for vSRX
      ec2_ami_facts:
        owners: 679593333241
        filters:
          name: "junos-vsrx3-x86-64-18.4R1.8--pm*"
          # name: "junos-vsrx3-x86-64-18.4R1.8-appsec--pm*"
          architecture: x86_64
      register: amis

    # The module ec2_ami_facts can return multiple ami instances for a given search
    # we will grab the latest instance (by date) that meets are critiers (RHEL 7.4 GA)
    - name: SET AMI FOR SERVER01
      set_fact:
        vsrx_ami: >
          {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
   # the ec2_instance module actually provisions the instance
   # group refers to the AWS Security Group
   # key_name refers to the SSH key pair to use for this instance
   # vpc_subnet_id refers to the Virtual Private Cloud (VPC) subnet idenitifer to tie the instance to
    # - name: Create vSRX image
    #   ec2_instance:
    #     name: "this is def a new instance"
    #     security_group: "aws-reinvent-sg"
    #     key_name: "aws-reinvent-key"
    #     instance_type: "c4.2xlarge"
    #     image_id: "{{ vsrx_ami.image_id }}"
    #     vpc_subnet_id: "{{ec2_vpc_subnet}}"
    #     ebs_optimized: yes
    #     wait: no
    #     network:
    #       ebs_optimized: yes
    #       assign_public_ip: true
    #       # interfaces: "{{ all_interfaces }}"
    #     tags:
    #       Name: "TEST_INSTANCE"
    #     volumes:
    #       - device_name: /dev/sda1
    #         ebs:
    #           volume_type: io1
    #           iops: 1000
    #           volume_size: 40
    #           delete_on_termination: true
    #   register: new_vsrx

    - name: Create EC2 instances for vsrx node
      ec2:
        # ebs_optimized: yes
        group: "aws-reinvent-sg"
        key_name: "aws-reinvent-key"
        vpc_subnet_id: "{{ec2_vpc_subnet}}"
        assign_public_ip: yes
        # instance_type: "c4.2xlarge" <- this takes 4 minutes
        # instance_type: "c4.xlarge" <- 4 minuts 20 seconds
        instance_type: "c4.xlarge"
        image: "{{ vsrx_ami.image_id }}"
        wait: no
        exact_count: 1
        user_data: ''
        instance_tags:
            Name: "{{instance_name}}"
        count_tag:
            Name: TEST_INSTANCE
        volumes: "{{juniper_volume}}"
      register: new_vsrx

    # Now that an instance has provisoined we can refresh inventory and grab new instances that are online
    - name: grab new aws facts
      meta: refresh_inventory

    # Debug allows us to print to the terminal window the group aws_ec2 which contains our newly provisioned hosts
    - name: debug
      debug:
        var: "item"
      loop: "{{ groups['aws_ec2'] }}"

# This is a new Play, just daisy-chaining a Playbook to run immediatley after the previous Playbook
- name: use wait for connection
  hosts: aws_ec2
  remote_user: ec2-user
  gather_facts: false

  tasks:
# This task will wait to get a ssh connetion to the
    - name: wait to connect
      wait_for:
        host: "{{ ansible_host }}"
        timeout: 800
        port: 22
      connection: local
